{"version":3,"file":"static/js/99.21a92a2c.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsFilter/ContactsFilter.module.css?d01d","components/ContactsFilter/ContactsFilter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsItem/ContactsItem.module.css?8722","components/ContactsItem/ContactsItem.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.js","webpack://goit-react-hw-08-phonebook/./src/views/ContactsView/ContactsView.module.css?919f","views/ContactsView/ContactsView.js"],"sourcesContent":["const getContacts = state => state.contacts.items;\nconst getFilterValue = state => state.contacts.filter;\nconst getLoading = state => state.contacts.isLoading;\nconst getError = state => state.contacts.error;\n\n\nconst contactsSelectors = {\n    getContacts,\n    getFilterValue,\n    getLoading,\n    getError,\n};\n\nexport default contactsSelectors;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsForm_wrapper__e4j5W\",\"form\":\"ContactsForm_form__1Y65-\",\"label\":\"ContactsForm_label__Z7jht\",\"labelText\":\"ContactsForm_labelText__MTX-A\",\"input\":\"ContactsForm_input__UjXFK\",\"button\":\"ContactsForm_button__zuUB3\"};","import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactsSelectors from 'redux/contacts/contacts-selectors';\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport s from './ContactsForm.module.css';\n\nconst ContactsForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const dispatch = useDispatch();\n\n    const handleChangeName = e => {\n        setName(e.currentTarget.value);\n    };\n    const handleChangePhone = e => {\n        setNumber(e.currentTarget.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const newContact = {\n            name, number,\n        };\n        if (\n            contacts.some(contact =>\n                contact.name.toLowerCase() === name.toLowerCase()\n            )\n        ) {\n            return Notify.info(`${name} exists in your phonebook`);\n        }\n        dispatch(contactsOperations.addContact(newContact));\n        Notify.success(`${name} has been added to your phonebook`);\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <div className={s.wrapper}>\n            <form className={s.form} onSubmit={handleSubmit}>\n                <label className={s.label}>\n                    <span className={s.labelText}>\n                        Name\n                    </span>\n                    <input\n                        className={s.input}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        value={name}\n                        onChange={handleChangeName}\n                    />\n                </label>\n                <label className={s.label}>\n                    <span className={s.labelText}>\n                        Phone number\n                    </span>\n                    <input\n                        className={s.input}\n                        type=\"tel\"\n                        name=\"phone\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        value={number}\n                        onChange={handleChangePhone}\n                    />\n                </label>\n                <button className={s.button} type='submit'>\n                    Add contact\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default ContactsForm;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsFilter_section__4Ctst\",\"wrapper\":\"ContactsFilter_wrapper__90o0z\",\"label\":\"ContactsFilter_label__48a3p\",\"input\":\"ContactsFilter_input__8nlWg\",\"labelText\":\"ContactsFilter_labelText__FMBfa\"};","import { useDispatch } from \"react-redux\";\nimport { filteredContact } from 'redux/contacts/contacts-slice';\nimport s from './ContactsFilter.module.css';\n\nconst ContactsFilter = () => {\n    const dispatch = useDispatch();\n\n    const onFilterInputChange = e => {\n        dispatch(filteredContact(e.currentTarget.value));\n    };\n\n    return (\n        <div className={s.section}>\n            <div className={s.wrapper}>\n                <label className={s.label}>\n                    <span className={s.labelText}>\n                        Find contact using name\n                    </span>\n                    <input\n                        className={s.input}\n                        type='text'\n                        name='filter'\n                        placeholder='Viktor'\n                        onChange={onFilterInputChange}\n                    />\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default ContactsFilter;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsItem_item__pedOi\",\"button\":\"ContactsItem_button__uPo7U\",\"text\":\"ContactsItem_text__-tF8m\"};","import { useDispatch } from \"react-redux\";\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport s from './ContactsItem.module.css';\n\nconst ContactsItem = ({ id, name, phone }) => {\n    const dispatch = useDispatch();\n\n    const removeContact = (id) => {\n        dispatch(contactsOperations.deleteContact(id));\n    };\n\n    return (\n        <li className={s.item}>\n            <p className={s.text}><b>{name}</b>:</p>\n            <p className={s.text}>{phone}</p>\n            <button\n                className={s.button}\n                type='button'\n                onClick={() =>removeContact(id)}\n            >\n                Delete\n            </button>\n        </li>\n    );\n};\nexport default ContactsItem;\n\n\n\n\n\n\n\n// import { ClipLoader } from \"react-spinners\";\n// import { useDeleteContactMutation } from \"redux/contacts/contacts-slice\";\n// import s from './ContactsItem.module.css';\n\n\n// const ContactsItem = ({ id, name, phone }) => {\n//     const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n//     return (\n//         <li className={s.item}>\n//             <p className={s.text}>{name}</p>\n//             <p className={s.text}>{phone}</p>\n//             <button\n//                 className={s.button}\n//                 type='button'\n//                 onClick={() => deleteContact(id)}\n//                 disabled={isDeleting}\n//             >\n//                 {isDeleting ? <ClipLoader size={10} /> : \"Delete\"}\n//             </button>\n//         </li>\n//     );\n// };\n\n// export default ContactsItem;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsList_wrapper__zyXOO\",\"list\":\"ContactsList_list__mmE3Y\",\"loader\":\"ContactsList_loader__Wb5g0\"};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport contactsSelectors from \"redux/contacts/contacts-selectors\";\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport ContactsItem from 'components/ContactsItem';\nimport s from './ContactsList.module.css';\n\n\nconst ContactsList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const filterValue = useSelector(contactsSelectors.getFilterValue);\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    const filteredContacts = () => {\n        const normalizedFilter = filterValue.toLowerCase();\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    };\n\n    const filteredContactList = filteredContacts();\n\n    return (\n        <div className={s.wrapper}>\n        <ul className={s.list}>\n            {contacts && filteredContactList.map(({ id, name, number }) => (\n                <ContactsItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    phone={number}\n                />\n            ))}\n\n            </ul>\n            </div>\n    );\n};\n\nexport default ContactsList;\n\n\n\n\n\n\n\n\n\n\n// import { useSelector } from \"react-redux\";\n// import { ClipLoader } from \"react-spinners\";\n// import { useFetchAllContactsQuery } from \"redux/contacts/contacts-slice\";\n// import ContactsItem from 'components/ContactsItem';\n// import s from './ContactsList.module.css'\n\n// const ContactsList = () => {\n//     const { data, isFetching } = useFetchAllContactsQuery();\n//     const filter = useSelector(state => state.filter);\n\n//     const getFilteredContacts = (filter, contacts) => {\n//         return contacts?.filter(\n//             ({ name, phone }) =>\n//                 name.toLowerCase().includes(filter.toLowerCase()) ||\n//                 phone.includes(filter)\n//         );\n//     };\n\n//     const contacts = getFilteredContacts(filter, data);\n\n//     return (\n//         <>\n//             {isFetching && <ClipLoader className={s.loader} />}\n//             {!isFetching &&\n//                 <ul className={s.list}>\n//                     {contacts && contacts.map(({ id, name, phone }) => (\n//                         <ContactsItem\n//                             key={id}\n//                             id={id}\n//                             name={name}\n//                             phone={phone}\n//                         />\n//                     ))}\n\n//                 </ul>\n//             }\n//         </>\n//     );\n// };\n\n// export default ContactsList;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsView_wrapper__6KPQm\"};","import ContactsForm from \"components/ContactsForm\";\nimport ContactsFilter from \"components/ContactsFilter\";\nimport ContactsList from \"components/ContactsList\";\nimport s from './ContactsView.module.css';\n\nconst ContactsView = () => (\n    <div className={s.wrapper}>\n        <ContactsForm/>\n        <ContactsFilter/>\n        <ContactsList />\n    </div>\n);\n\nexport default ContactsView;"],"names":["getContacts","state","contacts","items","getFilterValue","filter","getLoading","isLoading","getError","error","useState","name","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","reset","className","s","onSubmit","e","preventDefault","newContact","some","contact","toLowerCase","Notify","contactsOperations","type","pattern","title","required","value","onChange","currentTarget","placeholder","filteredContact","id","phone","onClick","removeContact","filterValue","useEffect","filteredContactList","normalizedFilter","includes","filteredContacts","map"],"sourceRoot":""}